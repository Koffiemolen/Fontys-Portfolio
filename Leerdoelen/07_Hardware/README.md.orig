# Introductie

Voor dit onderdeel is heb ik een test opstelling gemaakt om een beter begrip te krijgen over hoe hardware in elkaar zit. Wat komt er allemaal bij kijken en hoe haal en schrijf je data naar hardware componenten. 

Een goed beeld te krijgen wat er allemaal bij komt kijken heb ik ervoor gekozen om naast een temperatuursensor een oled scherm aan te sluiten.
Om ook inzicht te kijgen in hoe je deze data(temperatuur) nu kan versturen naar bijvoorbeeld een MQTT broker of dat je deze beschikbaar stelt via een API, heb ik besloten om dit ook beschikbaar te maken in de firmware.

# Inhoudsopgave
- Wat, waarom, hoe?
- Hardware
- Code

# Wat, waarom, hoe?
Om goed weer te kunnen geven wat ik allemaal gedaan heb, welke stappen ik heb doorlopen en welke keuzes ik gemaakt heb. Zal ik antwoord geven op de vragen wat, waarom en hoe.

## Wat
Het doel is om aan te tonen hoe je een sensor uit kan lezen en deze data, beschikbaar kan stellen. Om mijzelf uit te dagen heb ik ervoor gekozen om nog een OLED scherm toe te voegen en de data beschikbaar te stellen via een API en te versturen naar een MQTT broker. Deze technieken kunnen van pas komen voor het groepsproject.

Zowel het OLEd scherm als de sensor communiceren via het I2C protocol. [I²C - Wikipedia](https://en.wikipedia.org/wiki/I%C2%B2C)

Kort samengevat, het programmeren van een microcontroller, zodat deze een sensor uitleest en de data als een object aanbiedt. Dit gebeurt via een API en naar een MQTT broker.



## Waarom
Om een goed gevoel en een beter inzicht te krijgen wat er nu voor nodig is om een sensor uit te lezen en deze data beschikbaar te stellen in een lees- en handelbaar formaat. En deze data via bepaalde protocollen beschikbaar te stellen zodat deze als input gebruikt kan worden door andere processen/services.



## Hoe
Voor mijn proof of concept heb ik de onderstaande situatie nagebouwd.
![Default sketch](img/07_hardware/Beer.cool.board_bb.png)
<<<<<<< HEAD

De eerste uitdaging was de adressen te achterhalen van het OLED display en de temperatuur module. Elk I²C module heeft een eigen adres om aan te spreken.
Voordeel van I²C modules is dat het mogelijk is om 255 modules op 1 draad aan te sluiten. Je kan het vergelijken met een aantal huizen in een straat.

Om het adres te achterhalen heb ik gebruik gemaakt van de volgende code:

```C++
#include <Wire.h>
 
void setup() {
  Wire.begin();
  Serial.begin(115200);
  Serial.println("\nI2C Scanner");
}
 
void loop() {
  byte error, address;
  int nDevices;
  Serial.println("Scanning...");
  nDevices = 0;
  for(address = 1; address < 127; address++ ) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      if (address<16) {
        Serial.print("0");
      }
      Serial.println(address,HEX);
      nDevices++;
    }
    else if (error==4) {
      Serial.print("Unknow error at address 0x");
      if (address<16) {
        Serial.print("0");
      }
      Serial.println(address,HEX);
    }    
  }
  if (nDevices == 0) {
    Serial.println("No I2C devices found\n");
  }
  else {
    Serial.println("done\n");
  }
  delay(5000);          
}
```

Deze code scant de I²C bus of er modules aanwezig zijn. Als deze correct aangesloten zijn dan ze hebben spanning dan zal de code het adres geprint worden.

De volgende adressen zijn naar voren gekomen:
MLX90614: 0x5A
OLED: 0x3D

Er is iemand al zo aardig geweest om voor de temperatuursensor een library hiervoor te maken. Om de waarden van de sensor uit te kunnen lezen kan men de al gemaakte methodes in `<Adafruit_MLX90614.h>` gebruiken. 

Voor het uitlezen van de omgevings- en object temperatuur kunnen de volgende functies aangeroepen worden. De methode `.readAmbientTempC()` geeft een double terug met de waarde van de omgevingstemperatuur in graden Celcius.
De methode `readObjectTempC()` geeft een double terug met de waarde van het object voor de sensor in graden Celcius.

Voor het OLED scherm kan er gebruik gemaakt worden van de `<Adafruit_SSD1306.h>` library.

=======
![Default sketch](./img/07_hardware/Beer.cool.board_bb.png)
De eerste uitdaging was 
>>>>>>> origin
